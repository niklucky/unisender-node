import { KeyValue } from "./client"

export type UnisenderLang = 'ru' | 'en' | 'ua'

export type APIOptions = {
  lang: UnisenderLang,
  apiKey: string
}

export type List = {
  id: number
  title: string
}
export type CreateListPayload = {
  title: string
  before_subscribe_url?: string
  after_subscribe_url?: string
}
export type UpdateListPayload = CreateListPayload & {
  list_id: List['id']
}
export type DeleteListPayload = {
  list_id: number
}

export type ImportContactsData = {
  email: string   //	Адрес электронной почты контакта
  phone?: string

  delete?: 1 | 0, //	Если поле с этим названием содержит 1, то указанные контакты списка удаляются.
  tags?: string[] | string //	Через запятую можно указать метки, присваемые контакту. Максимально допустимое количество - 10 меток.

  email_status?: 'new' | 'active' | 'inactive' | 'unsubscribed' //	Статус email, один из: 'new' (новый), 'active' (активный), 'inactive'(временно отключённый), 'unsubscribed' (отписался от всех настоящих и будущих рассылок). Если статус не указан, то для новых адресов подразумевается 'new'. Для уже существующих адресов с текущим статусом, не совпадающим с 'active' или 'inactive', значение статуса поменять нельзя.
  email_availability?: number //	Доступность адреса.
  email_list_ids?: number[] | string //	Перечисленные через запятую коды списков, на которые будет подписан email-адрес.
  email_subscribe_times?: string[] | string | Date[] | Date //	Перечисленные через запятую дата и время подписки, количество и порядок дат должен соответствовать количеству и порядку кодов списков в email_list_ids. Даты указаны в UTC, в формате "ГГГГ-ММ-ДД чч:мм:сс" или "ГГГГ-ММ-ДД".
  email_unsubscribed_list_ids?: number[] | string //	Перечисленные через запятую коды списков, в которые email входит, но от которых контакт отписался. Может показаться, что это поле избыточно, ведь можно просто в поле email_status указать unsubscribed. Но если у вас несколько списков, контакт может быть отписанным, например, только от одного, и тогда только этот список указывается в email_unsubscribed_list_ids, а остальные - в email_list_ids. Поле же email_status относится к адресу в целом и может быть при этом равно 'active'.
  email_excluded_list_ids?: number[] | string //	Перечисленные через запятую коды списков, в которые email входит, но из которых контакт будет исключен.
  // Смысл полей совпадает с аналогичными полями для email. Ещё одно отличие — по умолчанию для новых телефонов phone_status устанавливается в 'active'. Также обратите внимание, что значение поля «phone» должно передаваться в международном формате (пример: +79261232323)  
  phone_status?: 'new' | 'active' | 'inactive' | 'unsubscribed'
  phone_availability?: number
  phone_list_ids?: number[] | string
  phone_subscribe_times?: string[] | string | Date[] | Date
  phone_unsubscribed_list_ids?: number[] | string
  phone_excluded_list_ids?: number[] | string
}
export type ImportContacts = {
  data: (ImportContactsData & Record<string, any>)[] | any[][]
  field_names?: string[]
  overwrite_tags?: 0 | 1
  overwrite_lists?: 0 | 1
}

export type ImportContactsResponse = {
  total: number //	Целое десятичное неотрицательное число — общее количество контактов во входном массиве data. Сумма inserted+updated+deleted может оказаться меньше, чем total, если были ошибки или дубликаты.
  inserted: number //	Целое десятичное неотрицательное число — количество успешно добавленных контактов, ни один из контактов которых ранее не встречался.
  updated: number //	Целое десятичное неотрицательное число — количество обновлённых данных контактов (e-mail или телефон уже был в базе).
  deleted: number //	Целое десятичное неотрицательное число — количество успешно удалённых контактов как новых, так и уже существующих, а также успешно удалённых.
  new_emails: number //	Целое десятичное неотрицательное число, меньшее или равное total. Сколько среди импортированных e-mail адресов получили статус 'new'. Причём в это число входят и существовавшие ранее адреса, статус которых был 'new'.
  invalid: number //	Целое десятичное неотрицательное число, больше или равное нулю. Сколько среди e-mail адресов не было импортировано.
  log: ImportContactsResponseLog[]
}

// Массив ошибок и предупреждений импорта, каждый элемент — объект со следующими свойствами:
// Поля параметра log
export type ImportContactsResponseLog = {
  index: number	// Целое десятичное неотрицательное число — номер контакта в массиве data.
  code: string	// Код ошибки или предупреждения
  message: string //	Сообщение об ошибке/предупреждении.  
}
export type EmailStatus =
  'new' | // - новый.
  'invited' | // - отправлено приглашение со ссылкой подтверждения подписки, ждём ответа, рассылка по такому адресу пока невозможна.
  'active' | // - активный адрес, возможна рассылка.
  'inactive' | // - адрес отключён через веб-интерфейс, никакие рассылки невозможны, но можно снова включить через веб-интерфейс.
  'unsubscribed' | // - адресат отписался от всех рассылок.
  'blocked' | // - адрес заблокирован администрацией нашего сервиса (например, по жалобе адресата), рассылка по нему невозможна. Разблокировка возможна только по просьбе самого адресата.
  'activation_requested' // - запрошена активация адреса у администрации UniSender, рассылка пока невозможна.{

export type ExportContacts = {
  notify_url?: string
  list_id?: number
  field_names?: string[]
  email?: string
  phone?: string
  tag?: string
  email_status?: EmailStatus

  phone_status?:
  'new' | // - новый.
  'active' | // - активный телефон, возможна рассылка. При добавлении этот статус телефон получает по умолчанию.
  'inactive' | // - номер отключён через веб-интерфейс, никакие рассылки невозможны, но можно снова включить через веб-интерфейс.
  'unsubscribed' | // - адресат отписался от всех рассылок.
  'blocked' // - адресат заблокирован администрацией нашего сервиса (например, по жалобе адресата), рассылка по нему невозможна. Разблокировка возможна только по просьбе самого адресата.
}

export type ExportContactsResponse = {
  task_uuid: string //  "ff719cf2-4ed9-11e9-8647-d663bd873d93",
  status: string // "new"
}

export type AsyncTaskResult = {
  task_uuid: string //  "ff719cf2-4ed9-11e9-8647-d663bd873d93",
  status: string // "new"
}

export type GetTaskResult = {
  task_uuid: string
}

export type ExcludePayload = {
  contact_type: 'email' | 'phone'
  contact: string
  list_ids?: string | number[]
}
export type SubscribePayload = {
  list_ids: string | number[]
  fields: KeyValue
  tags?: string[] | string
  double_optin?: 0 | 3 | 4
  overwrite?: 0 | 1 | 2
}

export type GetContact = {
  email: string //	E-mail адрес. Возвращает данные контакта по заданному значению этого параметра.
  include_lists?: 0 | 1 //	Вывод информации о списках, в которые добавлен контакт. Параметр принимает значение 1 или 0.
  include_fields?: 0 | 1	// Вывод информации о дополнительных полях контакта. Параметр принимает значение 1 или 0.
  include_details?: 0 | 1	// Вывод дополнительной информации о контакте. Параметр принимает значение 1 или 0.
}

export type ContactEmail = {
  email: string
  added_at: string //	Время создания контакта в формате «ГГГГ-ММ-ДД чч:мм:сс» в UTC.
  status: EmailStatus
  availability:
  'available' | // — адрес доступен.
  'unreachable' | // — адрес недоступен.
  'temp_unreachable' | // — адрес временно недоступен.
  'mailbox_full' | // — почтовый ящик переполнен.
  'spam_rejected' | // — письмо сочтено спамом сервером получателя. Через несколько дней этот статус будет снят.
  'spam_folder' // — письмо помещено в спам самим получателем.

  // Значение возвращается при использовании параметра inlcude_details.
  last_send_datetime?: string //	Время последней отправки письма на данный email адрес в формате «ГГГГ-ММ-ДД чч:мм:сс» в UTC. Если данного события еще не было, значение будет - null.
  last_delivery_datetime?: string	// Время последней доставки письма на данный email адрес в формате «ГГГГ-ММ-ДД чч:мм:сс» в UTC. Если данного события еще не было, значение будет - null.
  // Если данного события еще не было, значение будет - null.
  last_read_datetime?: string | null //	Время последнего прочтения письма данным email адресом в формате «ГГГГ-ММ-ДД чч:мм:сс» в UTC.
  last_click_datetime?: string | null //	Время последнего перехода по ссылке из письма данным email адресом в формате «ГГГГ-ММ-ДД чч:мм:сс» в UTC.
  rating: number | null //	Рейтинг имейл адреса, показывающий активность контакта. Значение принимает вид от “0.0” до “5.0”. Если не было ни одной отправки, значение будет - null.
}
export type ContactList = {
  id: number //	Идентификатор списка.
  status: string //	Статус email-адреса в списке. Перечень статусов
  added_at: string //	Время добавления контакта в список в формате «ГГГГ-ММ-ДД чч:мм:сс» в UTC.  
}
export type Contact = {
  email: ContactEmail
  // Данные по спискам, вызванные параметром include_lists
  lists?: ContactList[]
  // 	Перечень дополнительных полей и их значения, вызванные параметром include_fields.
  fields?: KeyValue
}

export type GetContactCount = {
  list_id: number
  params: {
    tagId?: number
    type?: 'address' | 'phone'
    search?: string
  }
}

export type ContactCount = {
  listId: number
  searchParams: {
    tagIds: string,
    type: GetContactCount['params']['type']
  }
  count: string
}

export type GetTotalContactsCount = {
  login: string
}

export type IsContactInLists = {
  email: string
  list_ids: string | number[]
  condition: 'and' | 'or'
}

export type CreateEmailMessage = {
  sender_name: string //	Имя отправителя. Произвольная строка, не совпадающая с e-mail адресом (аргумент sender_email).
  sender_email: string //E-mail адрес отправителя. Этот e-mail должен быть проверен (для этого надо создать вручную хотя бы одно письмо с этим обратным адресом через веб-интерфейс, затем нажать на ссылку «отправьте запрос подтверждения» и перейти по ссылке из письма).
  subject?: string // Строка с темой письма. Может включать поля подстановки. Параметр не обязателен, если указывается template_id
  // Параметр не обязателен, если указывается template_id или system_template_id
  body?: string //	Текст письма в формате HTML с возможностью добавлять поля подстановки.
  list_id: number //	Код списка, по которому будет произведена отправка e-mail рассылки.
  text_body?: string //	Текстовый вариант письма.
  generate_text: 0 | 1	// 0 или 1, по умолчанию 0. Значение 1 означает, что генерация текстовой части письма будет выполнена автоматически по HTML-части. 
  tag?: string
  attachments: KeyValue	// Ассоциативный массив файлов-вложений. В качестве ключа указывается имя файла, в качестве значения - бинарное содержимое файла (base64 использовать нельзя!)
  lang?: string //	Двухбуквенный код языка для автоматически добавляемой в каждое письмо строки со ссылкой отписки. Если не указан, то используется код языка из URL-обращения к API.
  template_id?: number //	id пользовательского шаблона письма, созданного ранее, на основе которого можно создать письмо. Значение можно получить с помощью getTemplates или listTemplates. Передав этот параметр, можно не заполнять обязательные параметры subject, body, а также text_body и lang. Эти значения будут подтянуты из соответствующих параметров шаблона, id которого был указан.
  system_template_id?: number //	id системного шаблона письма, на основе которого можно создать письмо. Значение можно получить с помощью getTemplates или listTemplates. Передав этот параметр, можно не заполнять обязательные параметры subject, body, а также text_body и lang. Эти значения будут подтянуты из соответствующих параметров шаблона, id которого был указан.
  wrap_type?: 'skip' | 'right' | 'left' | 'center' //	Выравнивание текста сообщения по заданному краю. Если аргумент отсутствует, то выравнивание производиться не будет. Может иметь значения: skip (не применять), right (выравнивание по правому краю), left (выравнивание по левому краю), center (выравнивание по центру).
}

export type UpdateEmailMessage = {
  id: number //	Идентификатор сообщения для редактирования, созданного ранее методом createEmailMessage.
  sender_name?: string
  sender_email?: string
  subject?: string
  body?: string
  list_id?: number
  text_body?: string
  lang?: string
  categories?: string
}

export type DeleteMessage = {
  message_id: number
}
export type GetActualMessageVersion = {
  message_id: number
}

export type SendTestEmail = {
  id: number
  email: string[] | string
}

export type SendEmail = {
  email: string // *	Адрес получателя сообщения.  
  sender_name: string
  sender_email: string
  subject: string
  body: string
  list_id: number
  attachments?: KeyValue
  lang?: string
  track_read?: 0 | 1
  track_links?: 0 | 1
  cc?: string
  headers?: string
  images_as?: 'attachments' | 'only_links' | 'user_default'
  ref_key?: string | number
  error_checking?: 0 | 1
  metadata?: KeyValue
}

export type CheckEmail = {
  email_id: number[] | string
}

export type CheckEmailStatus =
  'not_sent' | //	Сообщение еще не было обработано.
  'ok_sent' | //	Сообщение было отправлено, промежуточный статус до получения ответа о доставке/недоставке.
  'ok_delivered' | //	Сообщение доставлено. Может измениться на 'ok_read', 'ok_link_visited', 'ok_unsubscribed' или 'ok_spam_folder'.
  'ok_read' | //	Сообщение доставлено и зарегистрировано его прочтение. Может измениться на 'ok_link_visited', 'ok_unsubscribed' или 'ok_spam_folder'.
  'ok_fbl' | //	Сообщение доставлено, но помещено в папку «спам" получателем.
  'ok_link_visited' | //	Сообщение доставлено, прочитано и выполнен переход по одной из ссылок. Может измениться на 'ok_unsubscribed' или 'ok_spam_folder'.
  'ok_unsubscribed' | //	Сообщение доставлено и прочитано, но пользователь отписался по ссылке в письме. Статус окончательный.
  'err_blacklisted' | //	Сообщение отвергнуто из-за блеклистинга.
  'err_will_retry' | //	Одна или несколько попыток доставки оказались неудачными, но попытки продолжаются. Статус неокончательный.
  'err_resend' | //	Фактически эквивалентен err_will_retry, с некоторыми несущественными внутренними особенностями.
  'err_internal' | //	Внутренний сбой. Необходима переотправка письма. Статус окончательный.
  'err_user_unknown' | //	Адрес не существует, доставка не удалась. Статус окончательный.
  'err_user_inactive' | //	Адрес когда-то существовал, но сейчас отключен. Доставка не удалась. Статус окончательный.
  'err_mailbox_discarded' | //	Почтовый ящик получателя удален. Статус окончательный.
  'err_mailbox_full' | //	Почтовый ящик получателя переполнен. Статус окончательный.
  'err_no_dns' | //	Нет записи или некорректная запись в DNS.
  'err_no_smtp' | //	Запись в DNS есть, но smtp сервер отсутствует.
  'err_domain_inactive' | //	Домен не принимает почту или не существует. Статус окончательный.
  'err_destination_misconfigured' | //	Домен не принимает почту из-за неверной настройки на стороне получателя, причем ответ сервера содержит информацию об устранимой причине (например, используется неработающий блеклист и т. п.)
  'err_spam_rejected' | //	Письмо отклонено сервером как спам.
  'err_too_large' | //	Письмо превышает допустимый размер по данным сервера получателя. Также причиной может быть отклонение письма сервером получателя из-за непринимаемого типа вложения. Например, .exe.
  'err_giveup' | //	В этот статус переводятся сообщения из статусов err_will_retry, err_resend после истечения срока повторных попыток.
  'err_spam_removed' | //	Отправка отменена из-за блокировки рассылки как спама.
  'err_spam_may_retry' | //	Эквивалент err_spam_rejected, но вы можете переотправить сообщение путём генерации нового такого же письма.
  'ok_spam_folder' | //	Письмо доставлено, но сервер получателя поместил его в папку «Спам». Статус окончательный.
  'err_delivery_failed' | //	Доставка не удалась по иным причинам. Статус окончательный.
  'err_will_retry' | //	Одна или несколько попыток доставки оказались неудачными, но попытки продолжаются. Статус неокончательный.
  'err_skip_letter' | //	Отправка отменена, так как email адрес недоступен (кроме случаев err_unsubscribed и err_not_allowed).
  'err_spam_skipped' | //	Отправка отменена из-за блокировки рассылки как спама.
  'err_unsubscribed' | //	Отправка не выполнялась, т.к. адрес, по которому пытались отправить письмо, ранее отписался. Вы можете пометить этот адрес как отписавшийся и в своей базе данных и больше не отправлять на него. Статус окончательный.
  'err_src_invalid' | //	Неправильный адрес отправителя. Используется, если «невалидность email-а отправителя» обнаружилась не на стадии приёма задания и проверки параметров, а на более поздней стадии, когда осуществляется детальная проверка того, что нужно отправить. Статус окончательный.
  'err_dest_invalid' | //	Неправильный адрес получателя. Используется, если «невалидность email-а получателя» обнаружилась не на стадии приёма задания и проверки параметров, а на более поздней стадии, когда осуществляется подробная проверка того, что нужно отправить. Статус окончательный.
  'err_not_allowed' | //	Отправка отменена, так как сотрудники технической поддержки заблокировали рассылку или же из-за заблокированного адреса получателя или блокировки вашего аккаунта. Статус окончательный.
  'err_over_quota' | //	Отправка отменена, из-за нехватки средств на счету или из-за превышений по тарифу.
  'err_not_available' | //	Адрес, по которому вы пытались отправить письмо, не является доступным (т.е. ранее отправки на него приводили к ответу от сервера вида  «адрес не существует» или «блокировка по спаму») Доступность адреса теоретически может быть восстановлена через несколько дней или недель, поэтому можно его не вычёркивать полностью из списка потенциальных адресатов. Статус окончательный.
  'err_unreachable' | //	Отправка отменена, так как адрес недоступен, но, в отличие от статуса err_not_available, доступность адресу возвращена не будет. Статус окончательный.
  'err_lost' | //	Письмо не было отправлено из-за несогласованности его частей (например, в теле письма передается ссылка на изображение во вложениях, но само изображение во вложениях не передано), или было утеряно из-за сбоя на нашей стороне. Отправитель должен переотправить письмо самостоятельно, т.к. оригинал не сохранился. Статус окончательный.
  'skip_dup_unreachable' | //	Адрес недоступен, отправка не удалась. Статус окончательный.
  'skip_dup_temp_unreachable' | //	Адрес временно недоступен. Отправка не удалась. Статус окончательный.
  'skip_dup_mailbox_full' //	Почтовый ящик получателя переполнен. Статус окончательный.

export type CheckEmailResult = {
  statuses: {
    id: string
    status: CheckEmailStatus
  }[]
}

export type CreateSmsMessage = {
  sender: string // *	Имя отправителя от 3 до 11 латинских букв и цифр. Имя необходимо регистрировать в службе поддержки.
  body: string // *	Текст сообщения с возможностью добавлять поля подстановки.
  list_id: number // *	Код списка, по которому будет отправка SMS. Коды всех списков можно получить с помощью вызова getLists. Отправка сообщения возможна только по одному списку. Для отправки по другому списку надо создавать новое сообщение.
  tag?: string //	Метка. Если задана, то отправка сообщения будет производиться не по всему списку, а только по тем адресатам, которым присвоена заданная метка.
}

export type SendSms = {
  phone: string | string[] // *	Телефон получателя в международном формате с кодом страны (можно опускать ведущий «+»).
  sender: string // *	Отправитель – зарегистрированное имя отправителя (альфа-имя). Строка может содержать от 3 до 11 латинских букв или цифр с буквами. Также возможны специальные символы – точка, дефис, тире и некоторые другие.
  text: string // *	Текст сообщения, до 1000 символов. Символы подстановки типа игнорируются.
}
export type SendSmsResult = {
  currency: string //	Трёхбуквенный международный код валюты, в которой посчитана цена сообщения. Валюта совпадает с валютой вашего счёта (RUB, USD, EUR, UAH).
  price: number //	Цена в валюте currency, число с десятичной точкой.
  sms_id: number //	Уникальный цифровой код сообщения. Может использоваться для контроля доставки методом checkSms.
}

export type CheckSms = {
  sms_id: number | string
}

export type CheckSmsStatus =
  'not_sent' | //	Сообщение пока не отправлено, ждёт отправки. Статус будет изменён после отправки.
  'ok_sent' | //	Сообщение отправлено, но статус доставки пока неизвестен. Статус временный и может измениться.
  'ok_delivered' | //	Сообщение доставлено. Статус окончательный.
  'err_src_invalid' | //	Доставка невозможна, отправитель задан неправильно. Статус окончательный.
  'err_dest_invalid' | //	Доставка невозможна, указан неправильный номер. Статус окончательный.
  'err_skip_letter' | //	Доставка невозможна, т.к. во время отправки был изменён статус телефона, либо телефон был удалён из списка, либо письмо было удалено. Статус окончательный.
  'err_not_allowed' | //	Доставка невозможна, этот оператор связи не обслуживается. Статус окончательный.
  'err_delivery_failed' | //	Доставка не удалась - обычно по причине указания формально правильного, но несуществующего номера или из-за выключенного телефона. Статус окончательный.
  'err_lost' | //	Сообщение было утеряно, отправитель должен переотправить сообщение самостоятельно, т.к. оригинал не сохранился. Статус окончательный.
  'err_internal' //	внутренний сбой. Необходима переотправка сообщения. Статус окончательный.  

export type CheckSmsResult = {
  status: CheckEmailStatus
}

export type CreateCampaign = {
  message_id: string // *	Код сообщения, которое надо отправить. Передавать надо код, возвращённый методом createEmailMessage или createSmsMessage.
  start_time?: string //	Дата и время запуска рассылки в формате «ГГГГ-ММ-ДД чч:мм», которые не превышают 100 дней от текущей даты. Если аргумент не задан, то рассылка начинается немедленно. Используется часовой пояс, указанный в настройках личного кабинета пользователя. Для явного указания часового пояса используйте аргумент «timezone». Для дополнительной защиты от ошибок нельзя запланировать две рассылки одного и того же сообщения в пределах одного часа.
  timezone?: string //	Часовой пояс, в котором задано время в аргументе «start_time». Если не указан, то используется часовой пояс из настроек Личного Кабинета. Можно явно указать часовой пояс, но пока поддерживается только один вариант: «UTC».
  track_read?: 0 | 1 //	Принимаемое значение – 0 или 1 – отслеживать ли факт прочтения e-mail сообщения. По умолчанию 0 (не отслеживать). Если 1, то в e-mail будет добавлена ссылка на небольшую картинку, отслеживающую обращение. Аргумент track_read игнорируется для SMS-сообщений.
  track_links?: 0 | 1 //	Принимаемое значение – 0 или 1 – отслеживать ли переходы по ссылкам в e-mail сообщениях, по умолчанию 0 (не отслеживать). Если 1, то все внешние ссылки будут заменяться на специальные, позволяющие отследить факт перехода, а затем переправить пользователя на нужную страницу. Аргумент track_links игнорируется для SMS-сообщений.
  contacts?: string | string[] //	Перечисленные через запятую email-адреса (или телефоны для sms-сообщений), которыми нужно ограничиться при отправке сообщения. Если этот аргумент отсутствует, то отправка будет осуществлена по всем контактам списка, для которого составлено сообщение (возможно, с учётом сегментации по меткам). Если аргумент contacts присутствует, то во внимание будут приняты только те контакты, которые входят в список, а остальные будут проигнорированы. Если адресов (телефонов) слишком много для передачи в параметре contacts, вместо него можно использовать параметр contacts_url. Нельзя одновременно задавать оба параметра.
  contacts_url?: string //	Вместо параметра contacts, содержащего собственно email-адреса или телефоны, можно задать в данном параметре URL файла, откуда будут прочитаны адреса (телефоны). URL должен начинаться с "http://", "https://" или "ftp://". Файл должен содержать по одному контакту в строке, без запятых-разделителей; строки должны разделяться символом "n" или "rn" (формат Mac - только "r" - не поддерживается). Задавать одновременно параметры contacts и contacts_url нельзя. Файл можно удалять после того, как рассылка перейдёт в состояние 'scheduled'. Узнать статус рассылки можно с помощью метода getCampaignStatus.
  payment_limit?: number
  payment_currency?: string //	Параметр, позволяющие ограничить бюджет рассылки до заданной в payment_limit суммы в валюте payment_currency. Если параметр payment_limit не задан или равен 0, то он не будет учитываться. Если сумма на счету пользователя меньше, чем указанный бюджет, то это приведет к выводу ошибки. Если параметр payment_currency не передается, система будет использовать валюту, установленную в профиле пользователя. Если будет указан неподдерживаемый код валюты, будет возвращена ошибка. Допустимые коды валют: USD. Параметр может быть задан в верхнем, или нижнем регистре.
  track_ga?: 0 | 1 //	Принимаемое значение – 0 или 1 – включить ли для данной рассылки интеграцию с Google Analytics/Яндекс.Метрика. Действует только явно указанные значения, параметры пользования по умолчанию не применяются. По умолчанию 0 (не включена).
  // Параметры интеграции с Google Analytics/Яндекс.Метрика (действуют, если track_ga=1). Действует только явно указанные значения, параметры пользования по умолчанию не применяются. См. полное описание параметров.  
  ga_medium?: string
  ga_source?: string
  ga_campaign?: string
  ga_content?: string
  ga_term?: string
}

export type CreateCampaignResult = {
  campaign_id: number //	Уникальный код рассылки – целое положительное 31-битное число.
  status:
  'scheduled' | //	- рассылка поставлена очередь и будет отправлена, как только наступит время.
  'waits_censor' // - рассылка ожидает проверки администратором.
  count?: 0 //	Количество email-адресов (или телефонов в случае SMS-сообщения), на которые будет отправлена рассылка. Будет удаленно, возвращает всегда 0.  
}

export type CancelCampaign = {
  campaign_id: number
}
export type GetWebVersion = {
  campaign_id: number
  format?: 'html' | 'json'
}
export type GetWebVersionResult = {
  letter_id: number
  web_letter_link: string
}

export type UpdateOptInEmail = {
  sender_name: string // *	Имя отправителя. Произвольная строка, не совпадающая с e-mail адресом (аргумент sender_email).
  sender_email: string // *	E-mail адрес отправителя. Этот e-mail должен быть проверен (для этого надо создать вручную хотя бы одно письмо с этим обратным адресом через веб-интерфейс, затем нажать на ссылку "отправьте запрос подтверждения" и перейти по ссылке из письма).
  subject: string // *	Строка с темой письма. Может включать поля подстановки.
  body: string // *	Текст письма в формате HTML с возможностью добавлять поля подстановки.
  // Текст обязательно должен включать в себя как минимум одну ссылку с атрибутом href="{{ConfirmUrl}}".
  // Текст может включать и относительные ссылки на изображения, хранящиеся в папке пользователя на нашем сервере – такие изображения будут включены в само письмо. Ссылки на изображения на сервере должны иметь вид: "/ru/user_file?resource=images&name=IMAGE", где вместо IMAGE должно быть имя файла из вашей папки на сервере, напримерimage.jpg или folder/image.jpg.
  // Возможность добавлять вложенные файлы не реализована.
  // Предполагается, что HTML-текст содержит только содержимое тега body. Если Вы передаёте текст HTML целиком, то тестируйте такие письма дополнительно - заголовки вне body могут быть подвергнуты модификациям. Кроме того, чтобы уменьшить расхождение в отображении в различных почтовых программах, мы автоматически добавляем дополнительную разметку в каждое письмо (таблица с невидимыми границами, которая также задаёт шрифт по умолчанию и выравнивание текста по левой границе). Вы можете попросить отключить это для Ваших писем, обратившись в техподдержку.

  list_id: number // *	Код списка, при подписке на который будет отправлять данное письмо. Коды всех списков можно получить с помощью вызова getLists.  
}

export type GetSenderDomainList = {
  username: string // *	Логин пользователя в системе. Должен соответствовать API-ключу.
  format: string // *	Формат вывода. Принимает значения html | json, по умолчанию json (формат html предназначен только для визуального просмотра результата, парсер в данном формате работать не будет).
  domain?: string //	Название домена.
  limit?: number //	Количество записей в ответе на один запрос, должен быть целым числом в диапазоне 1 - 100 , по умолчанию 50.
  offset?: number //	Показывает, с какой позиции начинать выборку. Принимаются значения 0 или больше (позиция первой записи начинается с 0), по умолчанию 0.
}

export type GetSenderDomainListResult = {
  status: string
  domains: {
    Domain: string
    Status: 'active' | 'inactive'
    Key: string
  }[]
}

